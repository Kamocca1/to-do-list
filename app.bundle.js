(()=>{"use strict";var __webpack_modules__={74:()=>{eval('{\n;// ./src/model/todo.js\n\n\nclass ToDo {\n    #checklist = [];\n    static create(title, description, dueDate, priority, note) {\n        if (!title || typeof title !== "string" || title.trim() === "") {\n            throw new Error("ToDo title must be a non-empty string");\n        }\n        return new ToDo(title.trim(), description, dueDate, priority, note);\n    }\n\n    constructor(title, description, dueDate, priority, note) {\n        this.id = crypto.randomUUID();\n        this.title = title;\n        this.description = description || "";\n        this.dueDate = dueDate || "";\n        this.priority = priority || "low";\n        this.isComplete = false;\n        this.note = note || "";\n    }\n\n    toggleComplete() {\n        this.isComplete = !this.isComplete;\n    }\n\n    update(data) {\n        this.title = data.title || this.title;\n        this.description = data.description || this.description;\n        this.dueDate = data.dueDate || this.dueDate;\n        this.priority = data.priority || this.priority;\n        this.note = data.note || this.note;\n    }\n}\n\n;// ./src/model/project.js\n\n\nclass Project {\n    static #projects = [];\n    #todos = [];\n    #isRemovable = true;\n\n    static get projectsArray() {\n        return this.#projects;\n    }\n    static set projectsArray(value) {\n        if (\n            !Array.isArray(value) ||\n            !value.every((item) => item instanceof Project)\n        ) {\n            throw new Error("Array must contain only Project objects!");\n        }\n        this.#projects = value;\n    }\n\n    static create(name) {\n        if (!name || typeof name !== "string" || name.trim() === "") {\n            throw new Error("Project name must be a non-empty string");\n        }\n        const project = new Project(name.trim(), true);\n        this.projectsArray.push(project);\n        return project;\n    }\n\n    static createDefault(name) {\n        if (this.projectsArray.some((p) => !p.isRemovable)) {\n            return this.projectsArray.find((p) => !p.isRemovable);\n        }\n        const project = new Project(name.trim(), false);\n        this.projectsArray.push(project);\n        return project;\n    }\n\n    static getAll() {\n        return this.projectsArray;\n    }\n    static getById(id) {\n        return this.getAll().find((p) => p.id === id) || null;\n    }\n\n    /**\n     * Delete a project by id, except for the default (non-removable) project.\n     * Returns true if deleted, false if not found or not removable.\n     */\n    static deleteById(id) {\n        const idx = this.projectsArray.findIndex((p) => p.id === id);\n        if (idx === -1) return false;\n        const project = this.projectsArray[idx];\n        if (!project.isRemovable) return false;\n        this.projectsArray.splice(idx, 1);\n        return true;\n    }\n\n    constructor(name, isRemovable) {\n        this.id = crypto.randomUUID();\n        this.name = name;\n        this.#isRemovable = isRemovable;\n    }\n\n    get isRemovable() {\n        return this.#isRemovable;\n    }\n    get todos() {\n        return this.#todos;\n    }\n    set todos(value) {\n        if (\n            !Array.isArray(value) ||\n            !value.every((item) => item instanceof ToDo)\n        ) {\n            throw new Error("Array must contain only ToDo objects!");\n        }\n        this.#todos = value;\n    }\n\n    getToDoAll() {\n        return this.todos;\n    }\n    getToDoById(todoId) {\n        return this.todos.find((t) => t.id === todoId) || null;\n    }\n    addToDo(todo) {\n        this.todos.push(todo);\n    }\n    removeToDo(todoId) {\n        this.todos = this.todos.filter((t) => t.id !== todoId);\n    }\n}\n\n;// ./src/index.js\n\n\n\n// ===== APPLICATION LOGIC (CONTROLLER & VIEW) =====\nconst App = {\n    // --- STATE ---\n    projects: [],\n    currentProjectId: null,\n    editingTodoId: null,\n\n    // --- DOM ELEMENTS ---\n    elements: {\n        projectsList: document.getElementById("projects-list"),\n        newProjectForm: document.getElementById("new-project-form"),\n        newProjectName: document.getElementById("new-project-name"),\n        projectDetails: document.getElementById("project-details"),\n        currentProjectTitle: document.getElementById("current-project-title"),\n        todosContainer: document.getElementById("todos-container"),\n        addTodoBtn: document.getElementById("add-todo-btn"),\n        todoModal: document.getElementById("todo-modal"),\n        todoForm: document.getElementById("todo-form"),\n        modalTitle: document.getElementById("modal-title"),\n        modalCloseBtn: document.getElementById("modal-close-btn"),\n        todoIdInput: document.getElementById("todo-id"),\n        todoTitleInput: document.getElementById("todo-title"),\n        todoDescriptionInput: document.getElementById("todo-description"),\n        todoDueDateInput: document.getElementById("todo-due-date"),\n        todoPriorityInput: document.getElementById("todo-priority"),\n        todoProjectInput: document.getElementById("todo-project"),\n        todoNoteInput: document.getElementById("todo-note"),\n    },\n\n    // --- INITIALIZATION ---\n    init() {\n        this.loadData();\n        this.bindEvents();\n        this.render();\n    },\n\n    // --- DATA HANDLING ---\n    loadData() {\n        // Try to load from localStorage, otherwise create default data\n        const savedProjects = localStorage.getItem("todoAppProjects");\n        if (savedProjects) {\n            const parsedData = JSON.parse(savedProjects);\n            Project.projectsArray = parsedData.map((projData) => {\n                const project = new Project(\n                    projData.name,\n                    projData._Project__isRemovable\n                );\n                project.id = projData.id;\n                project.todos = projData._Project__todos.map((todoData) => {\n                    const todo = new ToDo(\n                        todoData.title,\n                        todoData.description,\n                        todoData.dueDate,\n                        todoData.priority,\n                        todoData.note\n                    );\n                    todo.id = todoData.id;\n                    todo.isComplete = todoData.isComplete;\n                    return todo;\n                });\n                return project;\n            });\n        }\n\n        this.projects = Project.getAll();\n        if (this.projects.length === 0) {\n            const defaultProject = Project.createDefault("Inbox");\n            const todo1 = ToDo.create(\n                "Welcome!",\n                "This is your first to-do.",\n                new Date().toISOString().split("T")[0],\n                "medium",\n                "You can edit or delete this."\n            );\n            defaultProject.addToDo(todo1);\n            this.projects = Project.getAll();\n        }\n\n        const savedCurrentProjectId = localStorage.getItem(\n            "todoAppCurrentProjectId"\n        );\n        this.currentProjectId =\n            savedCurrentProjectId && Project.getById(savedCurrentProjectId)\n                ? savedCurrentProjectId\n                : this.projects[0].id;\n    },\n\n    saveData() {\n        // Using private fields in JSON.stringify needs a replacer or manual object creation.\n        // It\'s simpler to create plain objects for serialization.\n        const serializableProjects = this.projects.map((p) => ({\n            id: p.id,\n            name: p.name,\n            _Project__isRemovable: p.isRemovable,\n            _Project__todos: p.todos.map((t) => ({ ...t })),\n        }));\n        localStorage.setItem(\n            "todoAppProjects",\n            JSON.stringify(serializableProjects)\n        );\n        localStorage.setItem("todoAppCurrentProjectId", this.currentProjectId);\n    },\n\n    // --- EVENT BINDING ---\n    bindEvents() {\n        this.elements.newProjectForm.addEventListener(\n            "submit",\n            this.handleNewProject.bind(this)\n        );\n        this.elements.projectsList.addEventListener(\n            "click",\n            this.handleProjectListClick.bind(this)\n        );\n        this.elements.addTodoBtn.addEventListener(\n            "click",\n            this.handleOpenModalForNew.bind(this)\n        );\n        this.elements.modalCloseBtn.addEventListener("click", () =>\n            this.elements.todoModal.close()\n        );\n        this.elements.todoForm.addEventListener(\n            "submit",\n            this.handleTodoFormSubmit.bind(this)\n        );\n        this.elements.todosContainer.addEventListener(\n            "click",\n            this.handleTodoActions.bind(this)\n        );\n    },\n\n    // --- EVENT HANDLERS ---\n    handleNewProject(e) {\n        e.preventDefault();\n        const name = this.elements.newProjectName.value.trim();\n        if (name) {\n            // Actually create the project and update both Project.projectsArray and this.projects\n            const newProject = Project.create(name);\n            this.projects = Project.getAll();\n            this.currentProjectId = newProject.id;\n            this.elements.newProjectName.value = "";\n            this.render();\n        }\n    },\n\n    handleProjectListClick(e) {\n        // Handle project selection\n        const projectItem = e.target.closest("[data-project-id]");\n        if (projectItem && !e.target.closest(".delete-project-btn")) {\n            this.currentProjectId = projectItem.dataset.projectId;\n            this.render();\n            return;\n        }\n\n        // Handle project deletion\n        if (e.target.closest(".delete-project-btn")) {\n            const projectItem = e.target.closest("[data-project-id]");\n            if (!projectItem) return;\n            const projectId = projectItem.dataset.projectId;\n            const project = Project.getById(projectId);\n            if (!project || !project.isRemovable) {\n                // Should not be possible to delete default project\n                return;\n            }\n            if (\n                confirm(\n                    `Are you sure you want to delete the project "${project.name}" and all its to-dos?`\n                )\n            ) {\n                // Remove from Project.projectsArray directly, since Project.delete is not a function\n                if (Array.isArray(Project.projectsArray)) {\n                    const idx = Project.projectsArray.findIndex(\n                        (p) => p.id === projectId\n                    );\n                    if (idx !== -1) {\n                        Project.projectsArray.splice(idx, 1);\n                    }\n                }\n                // Remove from this.projects\n                this.projects = this.projects.filter((p) => p.id !== projectId);\n                // If the deleted project was selected, switch to the first available project\n                if (this.currentProjectId === projectId) {\n                    this.currentProjectId =\n                        this.projects.length > 0 ? this.projects[0].id : null;\n                }\n                this.render();\n            }\n        }\n    },\n\n    handleOpenModalForNew() {\n        this.editingTodoId = null;\n        this.elements.modalTitle.textContent = "New To-Do";\n        this.elements.todoForm.reset();\n        this.elements.todoIdInput.value = "";\n        this.populateProjectSelector(this.currentProjectId);\n        this.elements.todoModal.showModal();\n    },\n\n    handleTodoFormSubmit(e) {\n        e.preventDefault();\n        const formData = {\n            title: this.elements.todoTitleInput.value,\n            description: this.elements.todoDescriptionInput.value,\n            dueDate: this.elements.todoDueDateInput.value,\n            priority: this.elements.todoPriorityInput.value,\n            note: this.elements.todoNoteInput.value,\n        };\n        const targetProjectId = this.elements.todoProjectInput.value;\n\n        if (this.editingTodoId) {\n            // Update existing ToDo\n            const sourceProject = this.findProjectByTodoId(this.editingTodoId);\n            const todo = sourceProject.getToDoById(this.editingTodoId);\n            todo.update(formData);\n\n            // Move ToDo if project changed\n            if (sourceProject.id !== targetProjectId) {\n                sourceProject.removeToDo(this.editingTodoId);\n                const targetProject = Project.getById(targetProjectId);\n                targetProject.addToDo(todo);\n            }\n        } else {\n            // Create new ToDo\n            const newTodo = ToDo.create(\n                formData.title,\n                formData.description,\n                formData.dueDate,\n                formData.priority,\n                formData.note\n            );\n            const project = Project.getById(targetProjectId);\n            project.addToDo(newTodo);\n        }\n\n        this.elements.todoModal.close();\n        this.render();\n    },\n\n    handleTodoActions(e) {\n        const todoCard = e.target.closest(".todo-card");\n        if (!todoCard) return;\n\n        const todoId = todoCard.dataset.todoId;\n        const project = this.findProjectByTodoId(todoId);\n\n        // Handle Delete\n        if (e.target.closest(".delete-todo-btn")) {\n            if (confirm("Are you sure you want to delete this to-do?")) {\n                project.removeToDo(todoId);\n                this.render();\n            }\n        }\n\n        // Handle Edit\n        if (e.target.closest(".edit-todo-btn")) {\n            this.editingTodoId = todoId;\n            const todo = project.getToDoById(todoId);\n            this.elements.modalTitle.textContent = "Edit To-Do";\n            this.elements.todoIdInput.value = todo.id;\n            this.elements.todoTitleInput.value = todo.title;\n            this.elements.todoDescriptionInput.value = todo.description;\n            this.elements.todoDueDateInput.value = todo.dueDate;\n            this.elements.todoPriorityInput.value = todo.priority;\n            this.elements.todoNoteInput.value = todo.note;\n            this.populateProjectSelector(project.id);\n            this.elements.todoModal.showModal();\n        }\n\n        // Handle Toggle Complete\n        if (e.target.closest(".toggle-complete-btn")) {\n            const todo = project.getToDoById(todoId);\n            todo.toggleComplete();\n            this.render();\n        }\n\n        // Handle Expand/Collapse\n        if (e.target.closest(".todo-header")) {\n            const details = todoCard.querySelector(".todo-details");\n            if (details) details.classList.toggle("hidden");\n        }\n    },\n\n    // --- UTILITY METHODS ---\n    findProjectByTodoId(todoId) {\n        return this.projects.find((p) => p.getToDoById(todoId));\n    },\n\n    populateProjectSelector(selectedProjectId) {\n        this.elements.todoProjectInput.innerHTML = "";\n        this.projects.forEach((p) => {\n            const option = document.createElement("option");\n            option.value = p.id;\n            option.textContent = p.name;\n            if (p.id === selectedProjectId) {\n                option.selected = true;\n            }\n            this.elements.todoProjectInput.appendChild(option);\n        });\n    },\n\n    // --- RENDER METHODS ---\n    render() {\n        this.renderProjects();\n        this.renderTodos();\n        this.saveData();\n    },\n\n    renderProjects() {\n        this.elements.projectsList.innerHTML = "";\n        this.projects.forEach((project) => {\n            const isActive = project.id === this.currentProjectId;\n            const activeClasses = isActive\n                ? "bg-blue-100 text-blue-600 font-semibold"\n                : "hover:bg-slate-100";\n            const projectEl = document.createElement("li");\n            projectEl.dataset.projectId = project.id;\n            projectEl.className = `p-2 rounded-md cursor-pointer transition-colors flex items-center justify-between gap-2 ${activeClasses}`;\n            // Project name span for click selection\n            const nameSpan = document.createElement("span");\n            nameSpan.textContent = project.name;\n            nameSpan.className = "flex-1";\n            projectEl.appendChild(nameSpan);\n\n            // Add delete button if project is removable (not default)\n            if (project.isRemovable) {\n                const deleteBtn = document.createElement("button");\n                deleteBtn.className =\n                    "delete-project-btn ml-2 p-1 text-slate-400 hover:text-red-600 transition-colors";\n                deleteBtn.title = "Delete project";\n                deleteBtn.innerHTML = `\n                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">\n                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clip-rule="evenodd" />\n                    </svg>\n                `;\n                projectEl.appendChild(deleteBtn);\n            }\n\n            this.elements.projectsList.appendChild(projectEl);\n        });\n    },\n\n    renderTodos() {\n        const project = Project.getById(this.currentProjectId);\n        if (!project) {\n            this.elements.currentProjectTitle.textContent =\n                "No Project Selected";\n            this.elements.todosContainer.innerHTML =\n                \'<p class="text-slate-500">Select a project to see your to-dos.</p>\';\n            return;\n        }\n\n        this.elements.currentProjectTitle.textContent = project.name;\n        this.elements.todosContainer.innerHTML = "";\n\n        if (project.getToDoAll().length === 0) {\n            this.elements.todosContainer.innerHTML =\n                \'<p class="text-slate-500 text-center mt-8">No to-dos in this project. Add one!</p>\';\n            return;\n        }\n\n        project\n            .getToDoAll()\n            .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\n            .forEach((todo) => {\n                const priorityClasses = {\n                    high: "border-red-400",\n                    medium: "border-yellow-400",\n                    low: "border-green-400",\n                };\n                const isOverdue =\n                    !todo.isComplete &&\n                    todo.dueDate &&\n                    new Date(todo.dueDate) < new Date();\n                const overdueClass = isOverdue ? "bg-red-50" : "";\n                const completedClass = todo.isComplete\n                    ? "opacity-60 line-through"\n                    : "";\n\n                const todoCard = document.createElement("div");\n                todoCard.className = `todo-card border-l-4 p-4 rounded-md bg-white shadow-sm transition-all ${\n                    priorityClasses[todo.priority]\n                } ${overdueClass}`;\n                todoCard.dataset.todoId = todo.id;\n\n                let formattedDate = "No due date";\n                if (todo.dueDate) {\n                    try {\n                        formattedDate = window.dateFns.format(\n                            new Date(todo.dueDate),\n                            "MMM dd, yyyy"\n                        );\n                    } catch (e) {\n                        console.error("Could not format date:", todo.dueDate);\n                    }\n                }\n\n                todoCard.innerHTML = `\n                        <div class="todo-header flex justify-between items-start cursor-pointer">\n                            <div class="flex items-center gap-3">\n                                <button class="toggle-complete-btn text-xl">${\n                                    todo.isComplete ? "✅" : "🔲"\n                                }</button>\n                                <div class="${completedClass}">\n                                    <h4 class="font-semibold text-lg">${\n                                        todo.title\n                                    }</h4>\n                                    <p class="text-sm text-slate-500">${formattedDate}</p>\n                                </div>\n                            </div>\n                            <div class="flex items-center gap-2">\n                                <button class="edit-todo-btn p-1 text-slate-500 hover:text-blue-600 transition-colors">\n                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" /></svg>\n                                </button>\n                                <button class="delete-todo-btn p-1 text-slate-500 hover:text-red-600 transition-colors">\n                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clip-rule="evenodd" /></svg>\n                                </button>\n                            </div>\n                        </div>\n                        <div class="todo-details hidden mt-4 pl-10 border-t pt-4">\n                             <p class="text-slate-600 mb-2">${\n                                 todo.description || "No description."\n                             }</p>\n                             ${\n                                 todo.note\n                                     ? `<p class="text-sm bg-yellow-100 p-2 rounded-md"><strong>Note:</strong> ${todo.note}</p>`\n                                     : ""\n                             }\n                        </div>\n                    `;\n                this.elements.todosContainer.appendChild(todoCard);\n            });\n    },\n};\n\n// --- Start the application ---\nApp.init();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n\n}')}},__webpack_exports__={};__webpack_modules__[74]()})();